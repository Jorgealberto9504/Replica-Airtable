// === Cliente de Prisma (genera tipos y m칠todos tipados) ===
generator client {
  provider = "prisma-client-js"
}

// === Fuente de datos: Postgres (URL viene de .env) ===
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* ============================================================
   ENUMS
   ============================================================ */

// Roles globales (en toda la plataforma)
enum PlatformRole {
  USER
  SYSADMIN
}

// Roles por Base (membership por base)
enum BaseRole {
  EDITOR      // puede crear/editar/eliminar registros
  COMMENTER   // puede comentar
  VIEWER      // solo lectura
}

// Visibilidad de la Base
enum BaseVisibility {
  PUBLIC
  PRIVATE
}

// === Tipos disponibles para columnas ===
enum FieldType {
  TEXT         // Texto corto
  LONG_TEXT    // Texto largo
  NUMBER       // N칰mero decimal
  CURRENCY     // Moneda (decimal; formato en Field.config)
  CHECKBOX     // Booleano (true/false)
  DATE         // Solo fecha
  DATETIME     // Fecha y hora
}

/* ============================================================
   MODELOS PRINCIPALES EXISTENTES (+ relaciones necesarias)
   ============================================================ */

// === Usuario (datos b치sicos + rol global + permisos globales) ===
model User {
  id                 Int           @id @default(autoincrement())
  email              String        @unique
  fullName           String
  passwordHash       String
  createdAt          DateTime      @default(now())

  // Estado y seguridad
  isActive           Boolean       @default(true)
  mustChangePassword Boolean       @default(true)
  passwordUpdatedAt  DateTime?

  // Rol global
  platformRole       PlatformRole  @default(USER)

  // Permiso global para crear bases (adem치s del SYSADMIN)
  canCreateBases     Boolean       @default(false)

  // Relaciones existentes
  ownedBases         Base[]        @relation("BaseOwner")
  baseMembers        BaseMember[]

  // Workspaces (existente)
  ownedWorkspaces    Workspace[]   @relation("WorkspaceOwner")

  // Backrefs de auditor칤a
  fieldsCreated      Field[]       @relation("FieldCreatedBy")
  fieldsUpdated      Field[]       @relation("FieldUpdatedBy")
  recordsCreated     RecordRow[]   @relation("RecordRowCreatedBy")
  recordsUpdated     RecordRow[]   @relation("RecordRowUpdatedBy")

  // 游녢 NUEVOS backrefs para auditor칤a de celdas
  recordCellsCreated RecordCell[]  @relation("RecordCellCreatedBy")
  recordCellsUpdated RecordCell[]  @relation("RecordCellUpdatedBy")
}

// === Workspace (agrupa Bases) ===
model Workspace {
  id         Int       @id @default(autoincrement())
  name       String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Propietario / due침o del workspace
  ownerId    Int
  owner      User      @relation("WorkspaceOwner", fields: [ownerId], references: [id])

  // Papelera (soft delete)
  isTrashed  Boolean   @default(false)
  trashedAt  DateTime?

  // Bases dentro del workspace
  bases      Base[]

  // 칈ndices y unicidad
  @@index([ownerId])
  @@index([isTrashed])
  @@index([trashedAt])
  @@unique([ownerId, name, isTrashed])
}

// === Base (espacio tipo Airtable) ===
model Base {
  id          Int             @id @default(autoincrement())
  name        String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Pertenencia a workspace (opcional)
  workspaceId Int?
  workspace   Workspace?      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  // Propietario / due침o de la base
  ownerId     Int
  owner       User            @relation("BaseOwner", fields: [ownerId], references: [id])

  // P칰blica / Privada
  visibility  BaseVisibility  @default(PRIVATE)

  // Papelera
  isTrashed   Boolean         @default(false)
  trashedAt   DateTime?

  // Miembros con rol por base
  members     BaseMember[]

  // Tablas dentro de la base
  tables      TableDef[]

  // 칈ndices y unicidad
  @@index([ownerId])
  @@index([visibility])
  @@index([workspaceId])
  @@index([trashedAt])
  @@index([isTrashed])
  @@unique([ownerId, name, isTrashed])
}

// === Membership (user + base + rol por base) ===
model BaseMember {
  id        Int       @id @default(autoincrement())
  baseId    Int
  userId    Int
  role      BaseRole  @default(VIEWER)
  createdAt DateTime  @default(now())

  base      Base      @relation(fields: [baseId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Un usuario no puede tener dos memberships en la misma base
  @@unique([baseId, userId])
}

// === Tabla dentro de una Base ===
model TableDef {
  id        Int       @id @default(autoincrement())
  baseId    Int
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Orden para tabs
  position  Int       @default(0)

  // Papelera
  isTrashed Boolean   @default(false)
  trashedAt DateTime?

  base      Base      @relation(fields: [baseId], references: [id], onDelete: Cascade)

  // Relaci칩n con columnas y filas
  fields    Field[]
  records   RecordRow[]

  @@unique([baseId, name, isTrashed])
  @@index([baseId])
  @@index([trashedAt])
  @@index([isTrashed])
  @@index([baseId, position])
}

/* ============================================================
   NUEVOS MODELOS PARA COLUMNAS Y REGISTROS (8.1 minimal)
   ============================================================ */

// === Definici칩n de columna ===
model Field {
  id        Int       @id @default(autoincrement())
  tableId   Int
  name      String
  type      FieldType
  config    Json?
  position  Int       @default(0)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Auditor칤a
  createdById Int?
  createdBy   User? @relation("FieldCreatedBy",  fields: [createdById], references: [id], onDelete: SetNull)
  updatedById Int?
  updatedBy   User? @relation("FieldUpdatedBy",  fields: [updatedById], references: [id], onDelete: SetNull)

  // Papelera r치pida para columnas
  isTrashed  Boolean   @default(false)
  trashedAt  DateTime?

  table      TableDef   @relation(fields: [tableId], references: [id], onDelete: Cascade)
  cells      RecordCell[]

  @@unique([tableId, name, isTrashed])
  @@index([tableId, position])
  @@index([isTrashed])
  @@index([trashedAt])
}

// === Fila/Registro de datos ===
model RecordRow {
  id        Int       @id @default(autoincrement())
  tableId   Int

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Auditor칤a de usuario
  createdById Int?
  createdBy   User? @relation("RecordRowCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  updatedById Int?
  updatedBy   User? @relation("RecordRowUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)

  // Papelera
  isTrashed  Boolean   @default(false)
  trashedAt  DateTime?

  table      TableDef  @relation(fields: [tableId], references: [id], onDelete: Cascade)
  cells      RecordCell[]

  @@index([tableId])
  @@index([updatedAt])
  @@index([isTrashed])
  @@index([trashedAt])
}

// === Celda: valor para el par (recordId, fieldId) ===
model RecordCell {
  id       Int   @id @default(autoincrement())
  recordId Int
  fieldId  Int

  record   RecordRow @relation(fields: [recordId], references: [id], onDelete: Cascade)
  field    Field     @relation(fields: [fieldId],  references: [id], onDelete: Cascade)

  // Auditor칤a y tiempos
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById Int?
  createdBy   User?    @relation("RecordCellCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  updatedById Int?
  updatedBy   User?    @relation("RecordCellUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)

  // Se usa SOLO UNA columna seg칰n Field.type
  stringValue   String?
  numberValue   Decimal?
  boolValue     Boolean?
  dateValue     DateTime?
  datetimeValue DateTime?

  @@unique([recordId, fieldId])
  @@index([fieldId])
  @@index([numberValue])
  @@index([datetimeValue])
}