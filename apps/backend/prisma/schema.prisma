// === Cliente de Prisma (genera tipos y métodos tipados) ===
generator client {
  provider = "prisma-client-js"
}

// === Fuente de datos: Postgres (URL viene de .env) ===
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// === Roles globales (en toda la plataforma) ===
enum PlatformRole {
  USER
  SYSADMIN
}

// === Roles por Base (membership por base) ===
// OJO: ya NO usamos ADMIN; el “dueño” (owner) se modela con Base.ownerId
enum BaseRole {
  EDITOR      // puede crear/editar/eliminar registros
  COMMENTER   // puede comentar
  VIEWER      // solo lectura
}

// === Visibilidad de la Base ===
enum BaseVisibility {
  PUBLIC
  PRIVATE
}

// === Usuario (datos básicos + rol global + permisos globales) ===
model User {
  id                 Int           @id @default(autoincrement())
  email              String        @unique
  fullName           String
  passwordHash       String
  createdAt          DateTime      @default(now())

  // Estado y seguridad
  isActive           Boolean       @default(true)
  mustChangePassword Boolean       @default(true)
  passwordUpdatedAt  DateTime?

  // Rol global
  platformRole       PlatformRole  @default(USER)

  // Permiso global para crear bases (además del SYSADMIN)
  canCreateBases     Boolean       @default(false)

  // Relaciones
  ownedBases         Base[]        @relation("BaseOwner")
  baseMembers        BaseMember[]
}

// === Base (espacio tipo Airtable) ===
model Base {
  id          Int             @id @default(autoincrement())
  name        String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Propietario / dueño
  ownerId     Int
  owner       User            @relation("BaseOwner", fields: [ownerId], references: [id])

  // Pública / Privada
  visibility  BaseVisibility  @default(PRIVATE)

  // NUEVO Papelera
  isTrashed   Boolean         @default(false)   // NUEVO Papelera: activa=false ⇢ en papelera
  trashedAt   DateTime?                           // NUEVO Papelera: fecha de envío a papelera

  // Miembros con rol por base
  members     BaseMember[]

  // Tablas dentro de la base
  tables      TableDef[]

  // Índices y unicidad
  @@index([ownerId])
  @@index([visibility])

  // CAMBIO Papelera: antes @@unique([ownerId, name])
  @@unique([ownerId, name, isTrashed])           // CAMBIO Papelera: permite duplicados en papelera

  // NUEVO Papelera: índices útiles para consultas/purge
  @@index([trashedAt])
  @@index([isTrashed])
}

// === Membership (user + base + rol por base) ===
model BaseMember {
  id        Int       @id @default(autoincrement())
  baseId    Int
  userId    Int
  role      BaseRole  @default(VIEWER)
  createdAt DateTime  @default(now())

  base      Base      @relation(fields: [baseId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Un usuario no puede tener dos memberships en la misma base
  @@unique([baseId, userId])
}

// === Tabla dentro de una Base ===
model TableDef {
  id        Int       @id @default(autoincrement())
  baseId    Int
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // NUEVO Papelera
  isTrashed Boolean   @default(false)            // NUEVO Papelera
  trashedAt DateTime?                            // NUEVO Papelera

  base      Base      @relation(fields: [baseId], references: [id], onDelete: Cascade)

  // CAMBIO Papelera: antes @@unique([baseId, name])
  @@unique([baseId, name, isTrashed])           // CAMBIO Papelera: permite duplicados en papelera

  @@index([baseId])
  // NUEVO Papelera: índices útiles
  @@index([trashedAt])
  @@index([isTrashed])
}